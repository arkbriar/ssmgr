// Code generated by protoc-gen-go.
// source: manager/protocol/shadowsocks_manager.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	manager/protocol/shadowsocks_manager.proto

It has these top-level messages:
	ShadowsocksService
	ServiceList
	Statistics
	AllocateRequest
	AllocateResponse
	FreeRequest
	FreeResponse
	RegisterRequest
	RegisterResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShadowsocksService struct {
	UserId   string `protobuf:"bytes,99,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Port     int32  `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *ShadowsocksService) Reset()                    { *m = ShadowsocksService{} }
func (m *ShadowsocksService) String() string            { return proto.CompactTextString(m) }
func (*ShadowsocksService) ProtoMessage()               {}
func (*ShadowsocksService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShadowsocksService) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShadowsocksService) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ShadowsocksService) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ServiceList struct {
	Services []*ShadowsocksService `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceList) GetServices() []*ShadowsocksService {
	if m != nil {
		return m.Services
	}
	return nil
}

type Statistics struct {
	Traffics map[int32]int64 `protobuf:"bytes,1,rep,name=traffics" json:"traffics,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *Statistics) Reset()                    { *m = Statistics{} }
func (m *Statistics) String() string            { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()               {}
func (*Statistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Statistics) GetTraffics() map[int32]int64 {
	if m != nil {
		return m.Traffics
	}
	return nil
}

type AllocateRequest struct {
	ServiceList *ServiceList `protobuf:"bytes,1,opt,name=service_list,json=serviceList" json:"service_list,omitempty"`
}

func (m *AllocateRequest) Reset()                    { *m = AllocateRequest{} }
func (m *AllocateRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateRequest) ProtoMessage()               {}
func (*AllocateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AllocateRequest) GetServiceList() *ServiceList {
	if m != nil {
		return m.ServiceList
	}
	return nil
}

type AllocateResponse struct {
	ServiceList *ServiceList `protobuf:"bytes,1,opt,name=service_list,json=serviceList" json:"service_list,omitempty"`
}

func (m *AllocateResponse) Reset()                    { *m = AllocateResponse{} }
func (m *AllocateResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateResponse) ProtoMessage()               {}
func (*AllocateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AllocateResponse) GetServiceList() *ServiceList {
	if m != nil {
		return m.ServiceList
	}
	return nil
}

type FreeRequest struct {
	ServiceList *ServiceList `protobuf:"bytes,1,opt,name=service_list,json=serviceList" json:"service_list,omitempty"`
}

func (m *FreeRequest) Reset()                    { *m = FreeRequest{} }
func (m *FreeRequest) String() string            { return proto.CompactTextString(m) }
func (*FreeRequest) ProtoMessage()               {}
func (*FreeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FreeRequest) GetServiceList() *ServiceList {
	if m != nil {
		return m.ServiceList
	}
	return nil
}

type FreeResponse struct {
	ServiceList *ServiceList `protobuf:"bytes,1,opt,name=service_list,json=serviceList" json:"service_list,omitempty"`
}

func (m *FreeResponse) Reset()                    { *m = FreeResponse{} }
func (m *FreeResponse) String() string            { return proto.CompactTextString(m) }
func (*FreeResponse) ProtoMessage()               {}
func (*FreeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FreeResponse) GetServiceList() *ServiceList {
	if m != nil {
		return m.ServiceList
	}
	return nil
}

type RegisterRequest struct {
	SelfUrl string `protobuf:"bytes,1,opt,name=self_url,json=selfUrl" json:"self_url,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegisterRequest) GetSelfUrl() string {
	if m != nil {
		return m.SelfUrl
	}
	return ""
}

type RegisterResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RegisterResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*ShadowsocksService)(nil), "protocol.ShadowsocksService")
	proto.RegisterType((*ServiceList)(nil), "protocol.ServiceList")
	proto.RegisterType((*Statistics)(nil), "protocol.Statistics")
	proto.RegisterType((*AllocateRequest)(nil), "protocol.AllocateRequest")
	proto.RegisterType((*AllocateResponse)(nil), "protocol.AllocateResponse")
	proto.RegisterType((*FreeRequest)(nil), "protocol.FreeRequest")
	proto.RegisterType((*FreeResponse)(nil), "protocol.FreeResponse")
	proto.RegisterType((*RegisterRequest)(nil), "protocol.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "protocol.RegisterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShadowsocksManagerSlave service

type ShadowsocksManagerSlaveClient interface {
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error)
	Free(ctx context.Context, in *FreeRequest, opts ...grpc.CallOption) (*FreeResponse, error)
	ListServices(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ServiceList, error)
	GetStats(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Statistics, error)
	GetStatsStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (ShadowsocksManagerSlave_GetStatsStreamClient, error)
	SetStats(ctx context.Context, in *Statistics, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type shadowsocksManagerSlaveClient struct {
	cc *grpc.ClientConn
}

func NewShadowsocksManagerSlaveClient(cc *grpc.ClientConn) ShadowsocksManagerSlaveClient {
	return &shadowsocksManagerSlaveClient{cc}
}

func (c *shadowsocksManagerSlaveClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error) {
	out := new(AllocateResponse)
	err := grpc.Invoke(ctx, "/protocol.ShadowsocksManagerSlave/Allocate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowsocksManagerSlaveClient) Free(ctx context.Context, in *FreeRequest, opts ...grpc.CallOption) (*FreeResponse, error) {
	out := new(FreeResponse)
	err := grpc.Invoke(ctx, "/protocol.ShadowsocksManagerSlave/Free", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowsocksManagerSlaveClient) ListServices(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := grpc.Invoke(ctx, "/protocol.ShadowsocksManagerSlave/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowsocksManagerSlaveClient) GetStats(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Statistics, error) {
	out := new(Statistics)
	err := grpc.Invoke(ctx, "/protocol.ShadowsocksManagerSlave/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowsocksManagerSlaveClient) GetStatsStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (ShadowsocksManagerSlave_GetStatsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ShadowsocksManagerSlave_serviceDesc.Streams[0], c.cc, "/protocol.ShadowsocksManagerSlave/GetStatsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &shadowsocksManagerSlaveGetStatsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShadowsocksManagerSlave_GetStatsStreamClient interface {
	Recv() (*Statistics, error)
	grpc.ClientStream
}

type shadowsocksManagerSlaveGetStatsStreamClient struct {
	grpc.ClientStream
}

func (x *shadowsocksManagerSlaveGetStatsStreamClient) Recv() (*Statistics, error) {
	m := new(Statistics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shadowsocksManagerSlaveClient) SetStats(ctx context.Context, in *Statistics, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/protocol.ShadowsocksManagerSlave/SetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShadowsocksManagerSlave service

type ShadowsocksManagerSlaveServer interface {
	Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error)
	Free(context.Context, *FreeRequest) (*FreeResponse, error)
	ListServices(context.Context, *google_protobuf.Empty) (*ServiceList, error)
	GetStats(context.Context, *google_protobuf.Empty) (*Statistics, error)
	GetStatsStream(*google_protobuf.Empty, ShadowsocksManagerSlave_GetStatsStreamServer) error
	SetStats(context.Context, *Statistics) (*google_protobuf.Empty, error)
}

func RegisterShadowsocksManagerSlaveServer(s *grpc.Server, srv ShadowsocksManagerSlaveServer) {
	s.RegisterService(&_ShadowsocksManagerSlave_serviceDesc, srv)
}

func _ShadowsocksManagerSlave_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsocksManagerSlaveServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ShadowsocksManagerSlave/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsocksManagerSlaveServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowsocksManagerSlave_Free_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsocksManagerSlaveServer).Free(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ShadowsocksManagerSlave/Free",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsocksManagerSlaveServer).Free(ctx, req.(*FreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowsocksManagerSlave_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsocksManagerSlaveServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ShadowsocksManagerSlave/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsocksManagerSlaveServer).ListServices(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowsocksManagerSlave_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsocksManagerSlaveServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ShadowsocksManagerSlave/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsocksManagerSlaveServer).GetStats(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowsocksManagerSlave_GetStatsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShadowsocksManagerSlaveServer).GetStatsStream(m, &shadowsocksManagerSlaveGetStatsStreamServer{stream})
}

type ShadowsocksManagerSlave_GetStatsStreamServer interface {
	Send(*Statistics) error
	grpc.ServerStream
}

type shadowsocksManagerSlaveGetStatsStreamServer struct {
	grpc.ServerStream
}

func (x *shadowsocksManagerSlaveGetStatsStreamServer) Send(m *Statistics) error {
	return x.ServerStream.SendMsg(m)
}

func _ShadowsocksManagerSlave_SetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statistics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsocksManagerSlaveServer).SetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ShadowsocksManagerSlave/SetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsocksManagerSlaveServer).SetStats(ctx, req.(*Statistics))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShadowsocksManagerSlave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ShadowsocksManagerSlave",
	HandlerType: (*ShadowsocksManagerSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _ShadowsocksManagerSlave_Allocate_Handler,
		},
		{
			MethodName: "Free",
			Handler:    _ShadowsocksManagerSlave_Free_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ShadowsocksManagerSlave_ListServices_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShadowsocksManagerSlave_GetStats_Handler,
		},
		{
			MethodName: "SetStats",
			Handler:    _ShadowsocksManagerSlave_SetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStatsStream",
			Handler:       _ShadowsocksManagerSlave_GetStatsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manager/protocol/shadowsocks_manager.proto",
}

// Client API for ShadowsocksManagerMaster service

type ShadowsocksManagerMasterClient interface {
	// Register registes self on the master node.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type shadowsocksManagerMasterClient struct {
	cc *grpc.ClientConn
}

func NewShadowsocksManagerMasterClient(cc *grpc.ClientConn) ShadowsocksManagerMasterClient {
	return &shadowsocksManagerMasterClient{cc}
}

func (c *shadowsocksManagerMasterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/protocol.ShadowsocksManagerMaster/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShadowsocksManagerMaster service

type ShadowsocksManagerMasterServer interface {
	// Register registes self on the master node.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

func RegisterShadowsocksManagerMasterServer(s *grpc.Server, srv ShadowsocksManagerMasterServer) {
	s.RegisterService(&_ShadowsocksManagerMaster_serviceDesc, srv)
}

func _ShadowsocksManagerMaster_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsocksManagerMasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ShadowsocksManagerMaster/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsocksManagerMasterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShadowsocksManagerMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ShadowsocksManagerMaster",
	HandlerType: (*ShadowsocksManagerMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ShadowsocksManagerMaster_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager/protocol/shadowsocks_manager.proto",
}

func init() { proto.RegisterFile("manager/protocol/shadowsocks_manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x8d, 0x9b, 0xa6, 0x75, 0xc7, 0xf9, 0xfd, 0x1a, 0xad, 0x42, 0xeb, 0x1a, 0x0e, 0xd1, 0x9e,
	0x22, 0x84, 0x1c, 0x14, 0x0e, 0x54, 0x45, 0x02, 0x01, 0x2a, 0x01, 0xd1, 0x5e, 0x6c, 0x38, 0x22,
	0x6b, 0xeb, 0x6c, 0x82, 0x95, 0x4d, 0xd6, 0xec, 0xae, 0x53, 0xe5, 0x23, 0x70, 0xe7, 0x03, 0xa3,
	0xf5, 0xfa, 0x1f, 0x69, 0x7a, 0x40, 0xe5, 0xe6, 0xf1, 0xbc, 0x79, 0xf3, 0x66, 0xe6, 0x2d, 0x3c,
	0x5d, 0x92, 0x15, 0x99, 0x53, 0x31, 0x4a, 0x05, 0x57, 0x3c, 0xe6, 0x6c, 0x24, 0xbf, 0x93, 0x29,
	0xbf, 0x95, 0x3c, 0x5e, 0xc8, 0xa8, 0x48, 0xfa, 0x79, 0x12, 0xd9, 0x25, 0xc6, 0x7b, 0x3c, 0xe7,
	0x7c, 0xce, 0xa8, 0x29, 0xba, 0xc9, 0x66, 0x23, 0xba, 0x4c, 0xd5, 0xc6, 0xc0, 0xf0, 0x37, 0x40,
	0x61, 0xcd, 0x11, 0x52, 0xb1, 0x4e, 0x62, 0x8a, 0x4e, 0xe1, 0x30, 0x93, 0x54, 0x44, 0xc9, 0xd4,
	0x8d, 0x07, 0xd6, 0xf0, 0x28, 0x38, 0xd0, 0xe1, 0xa7, 0x29, 0x42, 0xb0, 0x9f, 0x72, 0xa1, 0x5c,
	0x6b, 0x60, 0x0d, 0x3b, 0x41, 0xfe, 0x8d, 0x3c, 0xb0, 0x53, 0x22, 0xe5, 0x2d, 0x17, 0x53, 0x77,
	0x2f, 0x47, 0x57, 0x31, 0x9e, 0x80, 0x53, 0x70, 0x5e, 0x25, 0x52, 0xa1, 0x73, 0xb0, 0xa5, 0x09,
	0xa5, 0x6b, 0x0d, 0xda, 0x43, 0x67, 0xfc, 0xc4, 0x2f, 0x75, 0xfa, 0x77, 0x75, 0x04, 0x15, 0x1a,
	0xff, 0xb4, 0x00, 0x42, 0x45, 0x54, 0x22, 0x55, 0x12, 0x4b, 0xf4, 0x1a, 0x6c, 0x25, 0xc8, 0x6c,
	0x96, 0xc4, 0x25, 0x11, 0x6e, 0x10, 0x55, 0x38, 0xff, 0x4b, 0x01, 0xba, 0x5c, 0x29, 0xb1, 0x09,
	0xaa, 0x1a, 0xef, 0x15, 0xfc, 0xf7, 0x47, 0x0a, 0xf5, 0xa0, 0xbd, 0xa0, 0x9b, 0x62, 0x2e, 0xfd,
	0x89, 0xfa, 0xd0, 0x59, 0x13, 0x96, 0xd1, 0x7c, 0xa6, 0x76, 0x60, 0x82, 0x8b, 0xbd, 0x73, 0x0b,
	0x7f, 0x86, 0xe3, 0xb7, 0x8c, 0xf1, 0x98, 0x28, 0x1a, 0xd0, 0x1f, 0x19, 0xcd, 0x07, 0xeb, 0x16,
	0x52, 0x23, 0x96, 0x48, 0xb3, 0x1f, 0x67, 0xfc, 0xa8, 0xa1, 0xa9, 0xde, 0x42, 0xe0, 0xc8, 0x3a,
	0xc0, 0x57, 0xd0, 0xab, 0xc9, 0x64, 0xca, 0x57, 0x92, 0x3e, 0x80, 0x6d, 0x02, 0xce, 0x07, 0x41,
	0xff, 0x81, 0xac, 0x8f, 0xd0, 0x35, 0x44, 0x0f, 0x96, 0xf4, 0x0c, 0x8e, 0x03, 0x3a, 0x4f, 0xa4,
	0xa2, 0xa2, 0x94, 0x75, 0xa6, 0x6d, 0xc0, 0x66, 0x51, 0x26, 0x58, 0x4e, 0x74, 0x14, 0x1c, 0xea,
	0xf8, 0xab, 0x60, 0x78, 0x08, 0xbd, 0x1a, 0x5d, 0xf4, 0xee, 0x43, 0x47, 0xf1, 0x05, 0x5d, 0x15,
	0x58, 0x13, 0x8c, 0x7f, 0xb5, 0xe1, 0xb4, 0x61, 0x99, 0x6b, 0xe3, 0xfe, 0x90, 0x91, 0x35, 0x45,
	0xef, 0xc1, 0x2e, 0x97, 0x8a, 0xce, 0x6a, 0x8d, 0x5b, 0x57, 0xf3, 0xbc, 0x5d, 0x29, 0xd3, 0x14,
	0xb7, 0xd0, 0x4b, 0xd8, 0xd7, 0x2b, 0x40, 0x8d, 0x21, 0x1b, 0xbb, 0xf5, 0x4e, 0xb6, 0x7f, 0x57,
	0x85, 0x6f, 0xa0, 0xab, 0x27, 0x2f, 0x36, 0x22, 0xd1, 0x89, 0x6f, 0x5e, 0xa0, 0x5f, 0xbe, 0x40,
	0xff, 0x52, 0xbf, 0x40, 0x6f, 0xf7, 0xf6, 0x70, 0x0b, 0x5d, 0x80, 0x3d, 0xa1, 0x4a, 0xdb, 0xf8,
	0xfe, 0xe2, 0xfe, 0x2e, 0xbf, 0xe3, 0x16, 0x7a, 0x07, 0xff, 0x97, 0xb5, 0xa1, 0x12, 0x94, 0x2c,
	0xff, 0x96, 0xe1, 0xb9, 0xa5, 0xfb, 0x87, 0x65, 0xff, 0x9d, 0x28, 0xef, 0x1e, 0x4e, 0xdc, 0x1a,
	0x47, 0xe0, 0xde, 0xbd, 0xca, 0x35, 0xd1, 0x07, 0xd5, 0x67, 0x29, 0x8f, 0xdb, 0x3c, 0xcb, 0x96,
	0x3d, 0x9a, 0x67, 0xd9, 0xf6, 0x02, 0x6e, 0xdd, 0x1c, 0xe4, 0xc9, 0x17, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x98, 0x2a, 0xa0, 0x5f, 0x0d, 0x05, 0x00, 0x00,
}
